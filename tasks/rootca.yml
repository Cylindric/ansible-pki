---
- name: Ensure root structures exist
  file:
    path: "{{ item }}"
    recurse: yes
  with_items:
    - "{{ pki_basepath }}/root-ca/certs"
    - "{{ pki_basepath }}/root-ca/crl"
    - "{{ pki_basepath }}/root-ca/csr"
    - "{{ pki_basepath }}/root-ca/newcerts"
    - "{{ pki_basepath }}/root-ca/private"

- name: Ensure the root private directory is private
  file: 
    path: "{{ pki_basepath }}/root-ca/private"
    mode: '0700'

- name: Ensure the index exists
  copy:
    content: ""
    dest: "{{ pki_basepath }}/root-ca/index.txt"
    force: no

- name: Ensure the index attributes exists and sets unique_subject
  lineinfile:
    dest: "{{ pki_basepath }}/root-ca/index.txt.attr"
    state: present
    line: "unique_subject = yes"
    create: yes

- name: Ensure the serial file exists and starts at 1000
  copy:
    content: "1000"
    dest: "{{ pki_basepath }}/root-ca/serial"
    force: no

- name: Ensure the crlnumber file exists and starts at 1000
  copy:
    content: "1000"
    dest: "{{ pki_basepath }}/root-ca/crlnumber"
    force: no

- name: Check the OpenSSL config exists
  template:
    src: openssl.root.cnf.j2
    dest: "{{ pki_basepath }}/root-ca/openssl.cnf"

- name: Make sure there is a root key
  shell: |
    openssl genrsa \
    -aes256 \
    -out private/root.key.pem \
    -passout pass:{{ pki_root_pass }} 4096
  args:
    chdir: "{{ pki_basepath }}/root-ca"
    creates: "{{ pki_basepath }}/root-ca/private/root.key.pem"
  register: created_new_root_key

- name: Make sure the root key is secure
  file:
    path: "{{ pki_basepath }}/root-ca/private/root.key.pem"
    mode: "0400"

- name: Delete existing cert if new key
  file:
    path: "{{ pki_basepath }}/root-ca/certs/root.pem"
    state: absent
  when: created_new_root_key == true

- name: Make sure there is a root certificate
  shell: |
    openssl req \
    -config openssl.cnf \
    -key private/root.key.pem \
    -passin pass:{{ pki_root_pass }} \
    -new \
    -x509 \
    -days 7300 \
    -extensions v3_ca \
    -out certs/root.pem
  args:
    chdir: "{{ pki_basepath }}/root-ca"
    creates: "{{ pki_basepath }}/root-ca/certs/root.pem"
  register: created_new_root_cert

- name: Make sure the root certificate is read-only
  file:
    path: "{{ pki_basepath }}/root-ca/certs/root.pem"
    mode: "0444"

- name: Find request files
  find:
    paths: "{{ pki_basepath }}/root-ca/csr"
    patterns: "*.csr"
  register: request_files

- name: Sign certificates
  shell: |
    openssl ca \
    -batch \
    -config openssl.cnf \
    -extensions v3_intermediate_ca \
    -days 3650 \
    -notext \
    -in {{ item.path }} \
    -passin pass:{{ pki_root_pass }} \
    -out certs/{{ (item.path | basename | splitext)[0] }}.pem
  args:
    chdir: "{{ pki_basepath }}/root-ca"
    creates: "{{ pki_basepath }}/root-ca/certs/{{ (item.path | basename | splitext)[0] }}.pem"
  with_items: "{{ request_files.files }}"
  register: crl_needs_updating

- name: Delete old request files
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ request_files.files }}"

- name: Update Root CRL
  shell: |
    openssl ca \
            -config openssl.cnf \
            -gencrl \
            -passin pass:{{ pki_root_pass }} \
            -cert certs/root.pem \
            -out crl/root.crl.pem

    openssl crl \
            -inform PEM \
            -in crl/root.crl.pem \
            -outform DER \
            -out crl/root.crl
  args:
    chdir: "{{ pki_basepath }}/root-ca"
  when: crl_needs_updating